/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    jcenter()
}

dependencies {
    //from mancala
    
    // Use the Jersey framework to make writing and testing servlets easier.
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:3.0.5'
    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-http:3.0.5'
    implementation 'org.glassfish.jersey.core:jersey-server:3.0.5'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.0.5'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.0.5'
    // Use Jakarta (Java EE) for the servlet primitives.
    implementation 'jakarta.servlet:jakarta.servlet-api:5.+'
    // Use the Jetty server.
    implementation 'org.eclipse.jetty:jetty-server:11.0.19'
    implementation 'org.eclipse.jetty:jetty-servlet:11.0.19'
    implementation 'org.eclipse.jetty:jetty-webapp:11.0.19'
    // We want to have some logging output if things go wrong, so use the simple console logger from SLF4J.
    // In our simple use case, the logger gets automatically configured by simply existing.
    implementation 'org.slf4j:slf4j-simple:+'
    
    // Reference the domain and persistence subprojects.
    implementation project(':domain')
    implementation project(':persistence')

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    // Also use the Mockito mocking framework to mock simple server functionality.
    testImplementation "org.mockito:mockito-core:2.+"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
 
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'sogyo.wesley.ipsportdata.app.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
